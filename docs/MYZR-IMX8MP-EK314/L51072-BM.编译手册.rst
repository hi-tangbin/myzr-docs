
============
编译参考手册
============

准备编译环境
============

安装依赖包
----------

.. code-block:: shell
   
    # =====> Input:
    sudo apt install libssh-dev


安装交叉编译工具
----------------

imx-image-full toolchain 和 gcc-arm 安装其中一种即可。

两种交叉编译工具的区别在于：imx-image-full toolchain 可编译 QT 应用。

安装 imx-image-full toolchain
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. 准备交叉编译工具文件

把文件 "fsl-imx-xwayland-glibc-x86_64-imx-image-full-cortexa53-crypto-imx8mp-ddr4-evk-toolchain-5.10-hardknott.sh" 传输到 x86_64 Linux 主机中。

2. 执行安装指令

.. code-block:: shell

    # =====> Input:
    ./fsl-imx-xwayland-glibc-x86_64-imx-image-full-cortexa53-crypto-imx8mp-ddr4-evk-toolchain-5.10-hardknott.sh

3. 选择安装路径

出现下面信息时按下 Enter 即可（保持默认安装路径）

.. code-block:: log

    NXP i.MX Release Distro SDK installer version 5.10-hardknott
    ============================================================
    Enter target directory for SDK (default: /opt/fsl-imx-xwayland/5.10-hardknott):

4. 确认安装路径

出现下面信息时按下 Enter 即可（保持默认选项）

.. code-block:: log

    You are about to install the SDK to "/opt/fsl-imx-xwayland/5.10-hardknott". Proceed [Y/n]

5. 等待安装

安装过程可能需要数分钟，安装过程可以看到的信息类似如下：

.. code-block:: log

    Extractingdone
    Setting it up...done
    SDK has been successfully set up and is ready to be used.
    Each time you wish to use the SDK in a new shell session, you need to source the environment setup script e.g.
    $ . /opt/fsl-imx-xwayland/5.10-hardknott/environment-setup-cortexa53-crypto-poky-linux

6. 配置工具环境变量

.. code-block:: shell

    # =====> Input:
    . /opt/fsl-imx-xwayland/5.10-hardknott/environment-setup-cortexa53-crypto-poky-linux

7. 检查安装

.. code-block:: shell

    # =====> Input:
    ${CROSS_COMPILE}gcc -v

8. 工具信息

.. code-block:: log

    Using built-in specs.
    COLLECT_GCC=aarch64-poky-linux-gcc
    COLLECT_LTO_WRAPPER=/opt/fsl-imx-xwayland/5.10-hardknott/sysroots/x86_64-pokysdk-linux/usr/libexec/aarch64-poky-linux/gcc/aarch64-poky-linux/10.2.0/lto-wrapper
    Target: aarch64-poky-linux
    Configured with: ../../../../../../work-shared/gcc-10.2.0-r0/gcc-10.2.0/configure --build=x86_64-linux --host=x86_64-pokysdk-linux --target=aarch64-poky-linux --prefix=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/usr --exec_prefix=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/usr --bindir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux --sbindir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux --libexecdir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/usr/libexec/aarch64-poky-linux --datadir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/usr/share --sysconfdir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/etc --sharedstatedir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/com --localstatedir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/var --libdir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/usr/lib/aarch64-poky-linux --includedir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/usr/include --oldincludedir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/usr/include --infodir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/usr/share/info --mandir=/usr/local/oe-sdk-hardcoded-buildpath/sysroots/x86_64-pokysdk-linux/usr/share/man --disable-silent-rules --disable-dependency-tracking --with-libtool-sysroot=/home/HDWD110/yocto/imx-5.10.72-2.2.2-20220712/build--fsl-imx-xwayland/tmp/work/x86_64-nativesdk-pokysdk-linux/gcc-cross-canadian-aarch64/10.2.0-r0/recipe-sysroot --with-gnu-ld --enable-shared --enable-languages=c,c++ --enable-threads=posix --enable-multilib --enable-default-pie --enable-c99 --enable-long-long --enable-symvers=gnu --enable-libstdcxx-pch --program-prefix=aarch64-poky-linux- --without-local-prefix --disable-install-libiberty --disable-libssp --enable-libitm --enable-lto --disable-bootstrap --with-system-zlib --with-linker-hash-style=gnu --enable-linker-build-id --with-ppl=no --with-cloog=no --enable-checking=release --enable-cheaders=c_global --without-isl --with-gxx-include-dir=/not/exist/usr/include/c++/10.2.0 --with-build-time-tools=/home/HDWD110/yocto/imx-5.10.72-2.2.2-20220712/build--fsl-imx-xwayland/tmp/work/x86_64-nativesdk-pokysdk-linux/gcc-cross-canadian-aarch64/10.2.0-r0/recipe-sysroot-native/usr/aarch64-poky-linux/bin --with-sysroot=/not/exist --with-build-sysroot=/home/HDWD110/yocto/imx-5.10.72-2.2.2-20220712/build--fsl-imx-xwayland/tmp/work/x86_64-nativesdk-pokysdk-linux/gcc-cross-canadian-aarch64/10.2.0-r0/recipe-sysroot --enable-poison-system-directories --disable-static --enable-nls --with-glibc-version=2.28 --enable-initfini-array --enable-__cxa_atexit
    Thread model: posix
    Supported LTO compression algorithms: zlib
    gcc version 10.2.0 (GCC) 

安装 gcc-arm
~~~~~~~~~~~~

1. 准备交叉编译工具文件

把文件 "gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz" 传输到 x86_64 Linux 主机中。

2. 执行安装

.. code-block:: shell

    # =====> Input:

    # 创建安装目录
    mkdir ~/ssd/03_toolchain -p

    # 安装指令
    tar xf gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz -C ~/ssd/03_toolchain

3. 创建交叉编译工具配置文件

.. code-block:: shell

    # =====> Input:
    # 创建配置文件
    cat << EOF > ~/ssd/03_toolchain/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.env
    #!/bin/sh
    export PATH=${HOME}/ssd/03_toolchain/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin:${PATH}
    export ARCH=arm64
    export CROSS_COMPILE=aarch64-none-linux-gnu-
    EOF

    # 配置可执行权限
    chmod +x ~/ssd/03_toolchain/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.env

4. 配置工具环境变量

.. code-block:: shell

    # =====> Input:
    source ~/ssd/03_toolchain/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.env

5. 检查安装

.. code-block:: shell

    # =====> Input:
    ${CROSS_COMPILE}gcc -v

6. 工具信息

.. code-block:: log

    Using built-in specs.
    COLLECT_GCC=aarch64-none-linux-gnu-gcc
    COLLECT_LTO_WRAPPER=/home/STK720GS3/03_toolchain/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin/../libexec/gcc/aarch64-none-linux-gnu/10.3.1/lto-wrapper
    Target: aarch64-none-linux-gnu
    Configured with: /data/jenkins/workspace/GNU-toolchain/arm-10/src/gcc/configure --target=aarch64-none-linux-gnu --prefix= --with-sysroot=/aarch64-none-linux-gnu/libc --with-build-sysroot=/data/jenkins/workspace/GNU-toolchain/arm-10/build-aarch64-none-linux-gnu/install//aarch64-none-linux-gnu/libc --with-bugurl=https://bugs.linaro.org/ --enable-gnu-indirect-function --enable-shared --disable-libssp --disable-libmudflap --enable-checking=release --enable-languages=c,c++,fortran --with-gmp=/data/jenkins/workspace/GNU-toolchain/arm-10/build-aarch64-none-linux-gnu/host-tools --with-mpfr=/data/jenkins/workspace/GNU-toolchain/arm-10/build-aarch64-none-linux-gnu/host-tools --with-mpc=/data/jenkins/workspace/GNU-toolchain/arm-10/build-aarch64-none-linux-gnu/host-tools --with-isl=/data/jenkins/workspace/GNU-toolchain/arm-10/build-aarch64-none-linux-gnu/host-tools --enable-fix-cortex-a53-843419 --with-pkgversion='GNU Toolchain for the A-profile Architecture 10.3-2021.07 (arm-10.29)'
    Thread model: posix
    Supported LTO compression algorithms: zlib
    gcc version 10.3.1 20210621 (GNU Toolchain for the A-profile Architecture 10.3-2021.07 (arm-10.29)) 


编译 Linux
==========

1. 准备 Linux 源码包文件

把文件 "imx-linux-5.10.72*.tar.bz2" 传输到 x86_64 Linux 主机中。

2. 解压源码包

.. code-block:: shell

    # =====> Input:
    tar xf imx-linux-5.10.72*.tar.bz2 -C ~/ssd/02_source

3. 配置编译工具环境变量

.. code-block:: shell

    # =====> Input:
    source ~/ssd/03_toolchain/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.env
    # or
    . /opt/fsl-imx-xwayland/5.10-hardknott/environment-setup-cortexa53-crypto-poky-linux

4. Linux Image 文件编译

+ 执行编译

.. code-block:: shell

    # =====> Input:

    cd ~/ssd/02_source/imx-linux-5.10.72

    make imx_v8_defconfig

    make Image -j24

+ Image 编译过程中输出信息类似如下：

.. code-block:: log

    WRAP    arch/arm64/include/generated/uapi/asm/kvm_para.h
    WRAP    arch/arm64/include/generated/uapi/asm/errno.h
    ......
    KSYMS   .tmp_vmlinux.kallsyms2.S
    AS      .tmp_vmlinux.kallsyms2.S
    LD      vmlinux
    SORTTAB vmlinux
    SYSMAP  System.map
    OBJCOPY arch/arm64/boot/Image

5. Linux 设备树文件编译

+ 执行编译

.. code-block:: shell

    # =====> Input:
    make freescale/imx8mp-ddr4-evk.dtb


+ 设备树编译成功输出信息类似如下：

.. code-block:: log

    DTC     arch/arm64/boot/dts/freescale/imx8mp-ddr4-evk.dtb

6. Linux 模块编译

+ 执行编译

.. code-block:: shell

    # =====> Input:
    make modules -j24

+ 模块编译成功输出信息类似如下：

.. code-block:: log

    ......
    LD [M]  sound/usb/snd-usb-audio.ko
    LD [M]  sound/usb/snd-usbmidi-lib.ko

+ 安装内核模块到指定目录

.. code-block:: shell

    # =====> Input:
    mkdir modules
    make modules_install INSTALL_MOD_PATH=./modules

+ 模块安装输出信息类似如下：

.. code-block:: log

    ......
    INSTALL sound/usb/snd-usbmidi-lib.ko
    DEPMOD  5.10.72


+ 打包内核模块文件

.. code-block:: shell

    # =====> Input:
    find modules -name *.ko | xargs ${CROSS_COMPILE}strip
    tar cjf kernel-modules.tar.bz2 -C modules lib
